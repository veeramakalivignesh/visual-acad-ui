import Header from "./Header";
import Footer from "./Footer";
import { Link } from 'react-router-dom';

export default function About() {
    return (
        <>
            <Header />
            <div className="p-1 text-left" style={{ marginTop: "50px", marginLeft: "200px", marginRight: "200px"}}>
                <h2>Visual Acad AI</h2>
                <p>
                    Over the last century, education has transformed from traditional blackboard classrooms to smart classes
                    and online learning. Visual learning, particularly through interactive diagrams, has emerged as a highly
                    effective approach. However, creating these diagrams often requires significant effort from domain experts.
                    To address this, we have developed a framework that uses Generative AI to autonomously generate flow diagrams from code,
                    enabling quicker and clearer understanding of programs. Additionally, a chat interface allows interaction with the flow chart.
                    This technology aims to popularize access to high-quality educational resources, making learning more efficient and accessible.
                    It holds great potential for revolutionizing self-study and autonomous learning, empowering students to grasp complex concepts
                    more easily and independently, and enhancing productivity in software development environments.
                </p>
                <hr/>
                <h2>Code Visualizer</h2>
                <p>
                    Our Code Visualizer is a simple Proof-of-Concept tool to showcase how generative AI can transform interactive learning.
                    We have introduced the following 3 components in our tool
                </p>
                <h4>Code Editor</h4> 
                <p>
                    This is the place where one gives the input code that they wish to visualize. Currently, we only support python language.
                    Once the code is entered, clicking the <strong>Analyse</strong> will split the code into various components and will appear
                    in right of the editor. Explore various components and choose the one you would like to visualize. Then,
                    click <strong>Generate</strong> to generate the flow diagram
                </p>
                <h4>Flow Diagram</h4> 
                <p>
                    This is the region where you see the flow chart explanation of the code generated by the AI. This flowchart is a minimalistic
                    explanation of the code, that is, the AI tries to summarize the code into a few steps irrespective of the size of the code.
                    This is especially useful when we come accross large cumbersome code bases. However, it is to be noted that the AI generated
                    diagram is not always accurate and therefore it is encouraged to refer to the natural language explanation and talk to the Tutor bot.
                </p>
                <h4>Tutor Bot</h4>
                <p>
                    This is an AI Tutor bot that explains the code and the flowchart through a chat interface. One can ask any questions regarding the
                    code aswell as the generated flow diagram to this bot and it will explain in detail. It was in our user study that one was able
                    to easily understand unfamiliar code bases after a couple of interactions with the chat bot.  
                </p>
                <center>
                    <Link to="/">
                        <button className="button"> Visualize </button>
                    </Link>
                </center> 
                <hr/>
                <h2>Future Work</h2>
                <p>
                    Our methodology proved successful in generating accurate flowcharts for various code, particularly single functions. Despite
                    occasional inaccuracies in the diagrams, the chat agent efficiently summarizes large code and provides precise explanations.
                    Future directions for our tool include enhancing support for larger codebases and multiple languages, generating flowcharts
                    based on chat queries, and integrating the tool into code editors for better visualization of larger code contexts. We also
                    aim to extend this to other academic domains such as creating overview diagrams for textual content like history timelines.
                    Our experiences have provided a solid foundation for future work, and we are excited about the potential directions this project could take.
                </p>
                <hr/>
                <h2>Contributors</h2>
                <p>
                    <img src="veera.jpeg" alt="photo of veera"  style={{width:"240px", height:"240px", borderRadius:"50%"}}/> <br/>
                    <strong>Name: </strong>Veeramakali Vignesh Manivannan <br/>
                    <strong>Linkedin: </strong><a href="https://www.linkedin.com/in/veeramakali/">veeramakali</a> <br/>
                    <strong>GitHub: </strong><a href="https://github.com/veeramakalivignesh">veeramakalivignesh</a> <br/>
                    <strong>Email: </strong>mvignesh@iitdalumni.com <br/>
                    <strong>Phone: </strong>+1-858-518-9851
                </p>
                <p>
                    <img src="rohith_headshot.png" alt="photo of Rohith"  style={{width:"240px", height:"240px", borderRadius:"50%"}}/> <br/>
                    <strong>Name: </strong>Rohith Vutukuru <br/>
                    <strong>Linkedin: </strong><a href="https://www.linkedin.com/in/rohith-vutukuru/">veeramakali</a> <br/>
                    <strong>GitHub: </strong><a href="https://github.com/rohith267">veeramakalivignesh</a> <br/>
                    <strong>Email: </strong>rvutukuru@ucsd.edu <br/>
                    <strong>Phone: </strong>+1-858-518-9756
                </p>
            </div>
            <Footer/>
        </>
    );
}